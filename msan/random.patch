commit ae5e9476d51dd95cc012959b276817f580305a1c
Author: practicalswift <practicalswift@users.noreply.github.com>
Date:   Mon Jun 1 08:13:23 2020 +0000

    random: Add MemorySanitizer annotation __msan_unpoison in GetOSRand to avoid documented MSan false positive

diff --git a/src/random.cpp b/src/random.cpp
index 9c9a35709..6a1c16ded 100644
--- a/src/random.cpp
+++ b/src/random.cpp
@@ -30,6 +30,13 @@
 #ifdef HAVE_SYS_GETRANDOM
 #include <sys/syscall.h>
 #include <linux/random.h>
+
+#if defined(__has_feature)
+#if __has_feature(memory_sanitizer)
+#include <sanitizer/msan_interface.h>
+#endif
+#endif
+
 #endif
 #if defined(HAVE_GETENTROPY) || (defined(HAVE_GETENTROPY_RAND) && defined(MAC_OSX))
 #include <unistd.h>
@@ -304,6 +311,22 @@ void GetOSRand(unsigned char *ent32)
         } else {
             RandFailure();
         }
+    } else {
+#if defined(__has_feature)
+#if __has_feature(memory_sanitizer)
+        /* MemorySanitizer (MSAN) does not support syscall(SYS_getrandom, ..., ..., ...):
+         * Use __msan_unpoison to make MSAN understand how many bytes that have been
+         * written to ent32.
+         *
+         * __msan_unpoison does not change the actual memory content, but only MSAN's
+         * perception of the memory content.
+         *
+         * See https://github.com/google/sanitizers/issues/852 ("memory sanitizer: not
+         * tracking memory initialization with getrandom") for details.
+         */
+        __msan_unpoison(ent32, rv);
+#endif
+#endif
     }
 #elif defined(HAVE_GETENTROPY) && defined(__OpenBSD__)
     /* On OpenBSD this can return up to 256 bytes of entropy, will return an
